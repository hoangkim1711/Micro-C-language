Program([VarDecl(i,IntType),FuncDecl(Id(mainfunc),[],IntType,Block([VarDecl(n1,IntType),VarDecl(primeNo,IntType),CallExpr(Id(printf),[StringLiteral( Recursion : Check a number is prime number or not :)]),CallExpr(Id(printf),[StringLiteral(--------------------------------------------------------)]),CallExpr(Id(printf),[StringLiteral( Input any positive number : )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(n1)]),BinaryOp(=,Id(i),BinaryOp(/,Id(n1),IntLiteral(2))),BinaryOp(=,Id(primeNo),CallExpr(Id(checkForPrime),[Id(n1)])),If(BinaryOp(==,Id(primeNo),IntLiteral(1)),CallExpr(Id(printf),[StringLiteral( The number %d is a prime number. ),Id(n1)]),CallExpr(Id(printf),[StringLiteral( The number %d is not a prime number.),Id(n1)])),Return(IntLiteral(0))])),FuncDecl(Id(checkForPrime),[VarDecl(n1,IntType)],IntType,Block([If(BinaryOp(==,Id(i),IntLiteral(1)),Return(IntLiteral(1))),If(BinaryOp(==,BinaryOp(%,Id(n1),Id(i)),IntLiteral(0)),Return(IntLiteral(0)),Block([BinaryOp(=,Id(i),BinaryOp(-,Id(i),IntLiteral(1))),CallExpr(Id(checkForPrime),[Id(n1)])]))]))])