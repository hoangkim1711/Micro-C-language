Program([FuncDecl(Id(main),[],IntType,Block([VarDecl(wordPal,ArrayType(StringType,25)),CallExpr(Id(printf),[StringLiteral( Recursion : Check a given string is Palindrome or not :)]),CallExpr(Id(printf),[StringLiteral(----------------------------------------------------------)]),CallExpr(Id(printf),[StringLiteral( Input  a word to check for palindrome : )]),CallExpr(Id(scanf),[StringLiteral(%s),Id(wordPal)]),CallExpr(Id(checkPalindrome),[Id(wordPal),IntLiteral(0)]),Return(IntLiteral(0))])),FuncDecl(Id(checkPalindrome),[VarDecl(wordPal,ArrayTypePointer(StringType)),VarDecl(index,IntType)],VoidType,Block([VarDecl(len,IntType),BinaryOp(=,Id(len),BinaryOp(-,CallExpr(Id(strlen),[Id(wordPal)]),BinaryOp(+,Id(index),IntLiteral(1)))),If(BinaryOp(==,ArrayCell(Id(wordPal),Id(index)),ArrayCell(Id(wordPal),Id(len))),Block([If(BinaryOp(||,BinaryOp(==,BinaryOp(+,Id(index),IntLiteral(1)),Id(len)),BinaryOp(==,Id(index),Id(len))),Block([CallExpr(Id(printf),[StringLiteral( The entered word is a palindrome.)]),Return()])),CallExpr(Id(checkPalindrome),[Id(wordPal),BinaryOp(+,Id(index),IntLiteral(1))])]),Block([CallExpr(Id(printf),[StringLiteral( The entered word is not a palindrome.)])]))]))])