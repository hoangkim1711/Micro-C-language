Program([FuncDecl(Id(mainfunc),[],IntType,Block([VarDecl(n1,IntType),VarDecl(n2,IntType),VarDecl(lcmOf,IntType),CallExpr(Id(printf),[StringLiteral( Recursion : Find the LCM of two numbers :)]),CallExpr(Id(printf),[StringLiteral(----------------------------------------------)]),CallExpr(Id(printf),[StringLiteral( Input 1st number for LCM : )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(n1)]),CallExpr(Id(printf),[StringLiteral( Input 2nd number for LCM : )]),CallExpr(Id(scanf),[StringLiteral(%d),Id(n2)]),If(BinaryOp(>,Id(n1),Id(n2)),BinaryOp(=,Id(lcmOf),CallExpr(Id(lcmCalculate),[Id(n2),Id(n1)])),BinaryOp(=,Id(lcmOf),CallExpr(Id(lcmCalculate),[Id(n1),Id(n2)]))),CallExpr(Id(printf),[StringLiteral( The LCM of %d and %d :  %d),Id(n1),Id(n2),Id(lcmOf)]),Return(IntLiteral(0))])),FuncDecl(Id(lcmCalculate),[VarDecl(a,IntType),VarDecl(b,IntType)],IntType,Block([VarDecl(m,IntType),BinaryOp(=,Id(m),BinaryOp(+,Id(m),Id(b))),If(BinaryOp(&&,BinaryOp(==,BinaryOp(%,Id(m),Id(a)),IntLiteral(0)),BinaryOp(==,BinaryOp(%,Id(m),Id(b)),IntLiteral(0))),Return(Id(m)),CallExpr(Id(lcmCalculate),[Id(a),Id(b)]))]))])